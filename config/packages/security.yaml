security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:

        login: # the login firewall is used to authenticate users from login form
                pattern: ^/auth # all routes starting with /auth will be handled here
                stateless: true # no session will be created for these requests
                json_login: # use json_login to signal that this is a json login request 
                    check_path: /auth # the route that handles the login request 
                    username_path: email # the property to query by - e.g. username, email, etc
                    password_path: password # the property to query by - e.g. username, email, etc
                    success_handler: lexik_jwt_authentication.handler.authentication_success # the handler that will deal with the successful authentication
                    failure_handler: lexik_jwt_authentication.handler.authentication_failure # the handler that will deal with failed authentication
        
        api: # the api firewall is used to authenticate users from api requests
            pattern:   ^/api # all routes starting with /api will be handled here
            stateless: true # no session will be created for these requests
            jwt: ~ # use jwt to signal that this is a jwt authentication request
        
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\UserLoginAuthenticator
            logout: # the logout configuration
                path: app_logout # the route that handles the logout request
                invalidate_session: true # invalidate the session on logout to clean up the session
            login_throttling: # the login throttling configuration
                max_attempts: 5 # the maximum number of attempts before blocking the user
                interval: '30 minutes' # the interval to block the user after the maximum number of attempts
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        #- { path: ^/api/(?!/register), roles: ROLE_SUPER_ADMIN }  # Restreindre l'accès à /api sauf /api/register aux utilisateurs avec ROLE_ADMIN
        #- { path: ^/api, roles: ROLE_ADMIN }  # Restreindre l'accès à /api sauf aux utilisateurs avec ROLE_ADMIN
        #- { path: ^/api/login, roles: PUBLIC_ACCESS }  # Autoriser l'accès à /api/login pour tout le monde

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
